name: Bookstore WebApp CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Run Unit Tests
        run: npm run test -- --no-watch --code-coverage --browsers=ChromeHeadless
        continue-on-error: true

      - name: Upload Unit Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: coverage/
          if-no-files-found: warn

  playwright-tests:
    needs: build-and-test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: playwright-tests

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: 'playwright-tests/package.json'

      - name: Install Playwright Dependencies
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright Tests
        run: npm run mock
        continue-on-error: true

      - name: Run Feature Tests
        run: npm run feature
        continue-on-error: true

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-test-results
          path: |
            playwright-report/
            test-results/
            reports/cucumber/
          if-no-files-found: warn

  publish-report:
    needs: [build-and-test, playwright-tests]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Test Results
          path: '**/*.xml'
          reporter: java-junit
          fail-on-error: false

      - name: Upload Combined Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: |
            **/test-report/
            **/reports/
          if-no-files-found: warn